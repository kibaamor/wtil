syntax = "proto3";

package wt;

option go_package = "git.ppgame.com/rl/rlenv/api/wt";

service RLClientWork {
  rpc StartClient(MapVerticalView) returns (StartClientResponse) {}
  rpc StartTraining(StartTrainingData) returns (IdentityData) {}
  rpc SendObservationData(ObservationDatas) returns (ActionDatas) {}
}

enum ERLActorType {
  Player = 0;
  AI = 1;
}

enum ERLTrainingMode {
  RLAI_VS_RLAI = 0;   //强化学习AI - 强化学习AI
  PLAYER_VS_RLAI = 1; //玩家 - 强化学习AI
}

// 角色移动状态枚举
enum ERLCharacterMovingState {
  CHAR_MOVE_STATE_WALKING = 0;
  CHAR_MOVE_STATE_RUNNING = 1;
  CHAR_MOVE_STATE_DODGING = 2; //翻滚
  CHAR_MOVE_STATE_SLIDING = 3; //滑铲
  CHAR_MOVE_STATE_NOT_MOVING = 4;
  CHAR_MOVE_STATE_WEAK = 5; //虚弱倒地状态，不能执行任何操作，等待被处决
  CHAR_MOVE_STATE_DODGESHOOT = 6; //位移射击(瞄准翻滚)
  CHAR_MOVE_STATE_STAGGER = 7;    //硬直状态
}

// 移动状态
message RLMovingState {
  ERLCharacterMovingState CurrState = 1; // 移动状态
  RLVector3D MovingVelocity = 2;         // 移动速度（三维向量）
}

// 角色行动状态枚举
enum ERLCharacterActionState {
  RANGED_ATTAK = 0;          //普通远程攻击
  SPECIAL_RANGED_ATTACK = 1; // 特殊远程攻击
  DEFENDING = 2;             // 防御状态
  AIM = 3;                   // 瞄准状态
  MELEE_SPECIAL_1 = 4;       //近战特殊攻击1
  MELEE_SPECIAL_2 = 5;       //近战特殊攻击2
  RELOAD = 6;                //装弹
  USE_DRAGON_HEART = 7;      //喝血

  MELEE_SPECIAL_2_CHARGING = 198;       //近战特殊攻击2_蓄力状态
  SPECIAL_RANGED_ATTACK_CHARGING = 199; //特殊远程攻击_蓄力状态

  // TODO :换弹、吃药
}

//蓄力
message RLChargeAttackTime {
  float CurrTime = 1; //已持续蓄力时长
  float MinTime = 2;  //最小蓄力时长(必须要蓄力，才能开火等)
  float MaxTime = 3;  //最大蓄力时长
}

// 角色行动状态
message RLActionState {
  repeated ERLCharacterActionState CurrStateList = 1; //行动状态列表
  RLChargeAttackTime RangedAttack = 2;
  RLChargeAttackTime SpecialRangedAttack = 3;
  RLChargeAttackTime MeleeSpecialAttack2 = 4;
  bool NormalShootingDefendSuccess = 5; // 普通射击防御成功
  bool PerfectDefendSuccess = 6; // 完美防御成功(近战或特殊攻击)
}

message RLVector3D {
  float X = 1;
  float Y = 2;
  float Z = 3;
}

message Empty {}

// 远程武器
// TODO：增加武器参数等
message RLRangedWeapon {
  int32 WeaponID = 1;
  bool SupportAccumlateShoot = 2; //可以支持普通瞄准蓄力射击
  int32 MaxBurstCount =
      3; //连发次数（1为一次，3则为按一下，开火三次，-1为无限连发，击完整个弹夹)
  int32 AmmoLoaded = 4;    //已填充弹匣的弹药
  int32 MaxAmmoLoad = 5;   //最大弹药装载数
  int32 TotalAmmoLeft = 6; //总共还剩余弹药
}

message NearestProjectileActor {
  RLVector3D Location = 1;
  RLVector3D Velocity = 2;
}

message StartClientResponse { ERLTrainingMode TrainingMode = 1; }

message IdentityData { string EpisodeId = 1; }

message RLInstigatorDamage {
  string EpisodeId = 1;
  float Damage = 2;
}

message RLAIData {
  string EpisodeId = 1;
  float CurrHealth = 2;
  float CurrStamina = 3;
  RLRangedWeapon HeldWeapon = 4;
  RLVector3D CurrLocation = 5;
  RLVector3D CurrFaceDirection = 6; //角色面朝方向
  RLMovingState MovingState = 7;
  RLActionState ActionState = 8;
  repeated int32 ValidActions = 9;
  VirtualDepthMapSimple DepthMap = 10;         // 深度图
  NearestProjectileActor ProjectileActor = 11; //最近的抛射物
  int32 HealthPotion = 12;                     //血瓶数量
  float MaxHealth = 13;                        //最大血量
  RLVector3D CurrControlDirection = 14;        //控制方向，即视角方向
  repeated RLInstigatorDamage InstigatorDamageList = 15; //对我造成的伤害统计
}

message PlayerObservationData {
  int64 Timestamp = 1; //时间戳，毫秒
  ObservationData ObsData = 2;
  repeated ActionData ActionDataArray = 3;
}

message ObservationData {
  string EpisodeId = 1;
  repeated string OppoEpisodeIds = 2;
  repeated RLAIData AIData = 3;
}

message ObservationDatas {
  repeated ObservationData ObservationDataArray = 1; //能保证顺序总是固定的
  bool bPlayerDead = 2; //玩家与AI对战时，玩家是否死亡
  string EnvId = 3;     //环境唯一ID
}

message ActionData {
  repeated int32 ActionID = 1; //指令集
  string EpisodeId = 2;
  RLVector3D MoveDirection = 3;    //移动方向
  RLVector3D ControlDirection = 4; //控制旋转朝向，也是射击瞄准方向
}

message ActionDatas { repeated ActionData ActionDataArray = 1; }

message StartTrainingData {
  ERLActorType ActorType = 1;
  string VersionId = 2;
  ERLTrainingMode TrainingMode = 3; //训练mode
  string EnvId = 4;                 //环境唯一ID
}

/*
地图俯视图,
如原始比例为8000*4000，MapZoomoutMultiple值为10，则VirtualWidth为800,
VirtualHeight为400 按行遍历，第一行Index为0~800 第二行Index为801~1601,
如果有障碍，则会依次加入到ObstacleIndexs中
*/
message MapVerticalView {
  repeated uint32 ObstacleIndexs = 1;      // 地图中障碍Index
  uint32 VirtualWidth = 2;                 // 虚拟高度
  uint32 VirtualHeight = 3;                // 虚拟宽度
  uint32 MapZoomoutMultiple = 4;           // 地图缩小倍数
  repeated RLVector3D BoundsLocations = 5; // 四个边角位置
}

// 深度图 Hit Object 类型定义
enum ERLVirtualDepthMapPointHitObjectType {
  OBJECT_ENEMY = 0;                 // 敌人
  OBJECT_ALLY = 1;                  // 盟友
  OBJECT_NEUTRAl = 2;               // 中立
  OBJECT_OBSTACLE = 3;              // 障碍物
  OBJECT_OBSTACLE_DESTRUCTIBLE = 4; //可破坏障碍物
  OBJECT_NONE = 5;                  // 没有物体
}

// 深度图 Hit Point 类型定义
message VirtualDepthMapPoint {
  ERLVirtualDepthMapPointHitObjectType HitObjectType = 1; //击中物体类型
  int32 DistanceToEyePoint = 2;                           //击中点的距离
}

// 深度图
message VirtualDepthMap {
  repeated VirtualDepthMapPoint ScreenPixels = 1; // 击中点虚拟屏幕
  uint32 ScreenHeight = 2;    // 虚拟屏幕高度（像素）
  uint32 ScreenWidth = 3;     // 虚拟屏幕宽度（像素）
  float FOV = 4;              // 虚拟屏幕 FOV（角度）
  uint32 MaxViewDistance = 5; // 最远可视距离
}

// 深度图
message VirtualDepthMapSimple {
  string ScreenPixelString = 1; // 击中点虚拟屏幕
  uint32 ScreenHeight = 2;      // 虚拟屏幕高度（像素）
  uint32 ScreenWidth = 3;       // 虚拟屏幕宽度（像素）
  float FOV = 4;                // 虚拟屏幕 FOV（角度）
  uint32 MaxViewDistance = 5;   // 最远可视距离
}
